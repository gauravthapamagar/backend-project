////////How to setup professional backend project//////////

/////// While learning
1. Take notes 
2. Focus on concepts
3. Ask questions
4. Experiment independently
5. Use tools like console.log for debugging
6. Practice basics in parallel like CRUD apps: todolist, blog apps
npm init : initializes node package manager (creates package.json)
/////////////


create public folder and create temp folder inside it
.gitkeep: it keeps track of the empty folders 

create gitignore
gitignore: it will not push sensitive files and the files that are not ment to be seen
you can search gitignore generator and can copy paste based on preferred language from there

create .env
.env: during production they are taken from system to make secure

create source (src)
src: contains all the work files 
    create file inside src folder
You can create through right click or simply goto terminal / bash
    cd src
    ls
    touch app.js constants.js index.js

JavaScipt has two types of importing: common js and module js 

now change the package.json and add type: module.js to work according with module with consistency through the project

when server file needs to be reload we have to start and stop the server , here we use nodemon
nodemon: it restarts the server whenever file gets saved. (but we have to tell it.)
goto scripts in package.json "scripts": "nodemon src/index.js

difference between dependency and dev dependency: 
dev dependency: used in the development, not used in the production 

now create proper folder using professional structure in the source folder..
goto src and create: 
mkdir controllers
(It would consist majorly functionalities)
mkdir db
(Here we write how to connect to the database)
mkdir middlewares 
(These are the codes that run in between request and response)(Ex: janu bhanda aagadi ma sanga milera jaanu)
mkdir models
(defines structure of the data and how it interacts with the database)
mkdir routes
(defines the paths and endpoints of the application)
mkdir utils
(It contains reusable functionalities that performs common tasks)

after that goto nodemon and install prettier from there
vs code prettier is not recommended because while pushing the code in the git it causes so many conflicts.
Ex: some may write semicolons other may not, spaces etc
It tells which type of formatting we are using 

after appearance of prettier we have to add some files from our side. 
create .prettierrc

create .prettierignore

////////End of professional backend file folder structure setup///////////

/////////////////DATABASE CONNECTION/////////////////////
*********HOW TO CONNECT DATABASE IN MERN **************

to enter into mongodb from the atlas we need two things:
1. you op address must be allowed and you must have correct id and password  
-in production grade we never say allow access from anywhere in the ip address 
-in professional way ip address is added of that machine where you have all the backend codes   
2. a string as well

After that goto env
then next step is to create database name in constants

Database connection can be in 2 major ways:
    -place all code in the index file and when index file loads then the function in which database code is written will get execute
    -make db named file and write all function there and then import that file into the index file and then execute

app.js will be through express and database connection will be through mongoose.

install mongoose express dotenv packages

goto index and import mongoose

**********IMPORTTANT NOTE REGARDING DATABASE**************
1. Always wrap code in the try catch method. Because when we try to acess database there might be problem or you can do promises
2. "Database is always in another continent" it means when we talk to database it takes time which means always put async, await
*******************************************************

Using second approach create file in db folder.
export that

then import that in index.js

As early as possible in your application import and configure dotenv 
jati chado application load bho teti chado environment variable must be available 
if we load first file we want to load environment variable in that specific file. 


require('dotenv').config() place this in index.js
but in consistent formatting

also goto package.json and in scripts write experimental-json-module



****** First install dependencies mongoose dotenv and express 
create file in db folder.
also you have to goto env and set port and mongodb uri
then goto constants.js and export database name
then come to index
import that db file and run the function example connectDB()
also import dotenv and by doing dotenv.config ......
then goto the directory file ex: cd src then do npm run dev 
you will see message wriiten in db file i.e mongodb connection successful

/******1. Install Dependencies
    Run npm install express mongoose dotenv
2. Setup Environment Variables
    Create a .env file in the root directory
    Set PORT=5000 and MONGODB_URI=<your-mongodb-connection-string>
3. Create a Database Connection File
    Inside the db folder, create a db.js file
    Import mongoose and write a function to connect MongoDB
    Use process.env.MONGODB_URI to connect to the database
    Log a success message on connection
    Handle errors properly and exit the process if connection fails 
    Export the connection function
4. Export Database Name in Constants File
    Create constants.js
    Export DB_NAME with your database name
5. Setup Main Server File (index.js)
    Import dotenv, express, and the database connection file
    Call dotenv.config() to load environment variables
    Run the connectDB() function to establish the database connection
    Define the PORT from .env with a fallback
    Start the server and log a success message
6. Run the Server
    Navigate to the src directory using cd src
    Run npm run dev to start the server
7. Expected Output
    Console should display:
    MongoDB Connected: <your-cluster-url>
    Server running on port 5000
    ***********////////


*****CUSTOM API RESPONSE AND ERROR HANDLING********

goto app.js
Note: if async method completes it technically returns promise as well

It's useful to note that async functions return promises, 
and when using .then() and .catch(), it helps handle the result of these promises (i.e., success or failure).

goto index then write .then() and .catch()

install package:
    cookie-parser:
    cors: allows settings for all the cross origin resourse sharing

Middleware: they are the functions that are used to modify the request and response objects or have the access to request and response
Note: If you are using middlewares most of the time you use app.use other than app.get app.post 
to apply middleware to all routes or specific routes

Call both packages in app

so data might come from anywhere so we have to do preparation 
urls, json, forms, etc...

example:middleware like express.urlencoded() is useful to decode characters properly (like %20 for space). when data comes from URLs.

do it in app.js

if data comes from url there may be some issue 
url has its own encoder that converts the special characters like space=%20
for that do configuration app.use .....

some middlewares are essential for working with incoming data, 
e.g., express.json() for parsing JSON data, and express.urlencoded() for parsing URL-encoded form data.
Middlewares runs in the order they're defined in the app.

middleware example: if we goto /instagram then after going instagram req.send("gaurav") is seen on the profile.
but during that the function that runs after logging in instagram that checks if user is logged in or if the user is admin
is an example of middlewares. 

video stopped at 19:15 of video no 9.

starts:

we have studied till this only about req and res but there is also err and next i.e 4elements. (err, req, res, next)
next: if we use next then we are talking about middlewares

we are interacting with database numerous number of times so instead of writing code several times why dont we create utility file
that consists of generalized functions.
so when we need to execute these functions pass the function in the method and then it will execute and pass

GOTO utils folder create file asyncHandler

if you want to standardize the api error and response
(search on web nodejs api errors)

video stopped at 36:00

create utils file named ApiError to handle all types of error encountered in the website

NOTE: difference between export {anyname}, export const anyname, export default anyname
export {anyname} :
import syntax: import {anyname} from ..
can be multiple exported within same file
used when you need to export multiple things from same file ///Common use case: api services, utility functions, reusable components

export const anyname:
import syntax: import {anyname} from ..
can have multiple exports
used when you have to declare and export at the same time. // Common use exporting constants , classes, utility functions

export default anyname:
import syntax: import anyname from 
can have only one export per file
used when module is mainly about one thing eg function class or component // Common use Main utility functions, react components ...

similarly create file in utils named apiresponse for handling all the api responses.

now write middleware where when this type of error comes then it always should go through api error.


/////////////**************USER AND VIDEO MODELS WITH HOOKS AND JWT**********/////////

goto models and create new file user.model.js (you can write any user.js or user.model.js depending upon you)
also video.model.js

Note:// schema is an Object Data Modeling (ODM) library for MongoDB and Node.js.
//defines the structure of the documents within mongodb collection.

create schema for both user and model

Note: now we use special package: mongoose-aggregate-paginate-v2
It allows to write aggregation queries. 

install that package
It is injected as plugin
-written before export

import that and added within plugin

now we can write aggregation queries.

video stopped at 23:25

download bcrypt package, jsonwebtoken
(Bcrypt is a library that helps you to hash your password)
(jsonwebtoken encodes user info into a token, which can be verified without storing session data on server.)

import both in user.

how to encrypt?
we have to take help from mongoose hooks

pre hook: when you data is going to be saved, then just before that we can run such that those datas/password are encrypted

Note: these hooks are present mainly in models files in professional code

Note: in arrow function , it doesnot have this reference i.e it doesnot have the knowledge of particular context.
But in pre hook the need of knowing context is very important.

bcrypt can hash password but it can check password as well

video stops at 37:25

JWT: it is a bearer token. it means whoever has this token then the data is sent to that person. just like the key.

create access token secret in environment variables.
also create referesh token 

we are using both session and cookies
access token will not be stored in the database but referesh token will be stored in database

payload: what are the informations that to be put

///////////////*********************END OF THE VIDEO**********///////////////// 

////////////////********HOW TO UPLOAD FILE IN BACKEND | MULTER

Note: file handling aafnei server ma garidaina mainly , either third party service or aws

Note: file upload is created for separate utility sometimes middleware or utility
we create this standalone so that we can reuse

similarly we can use this for image, audio, video

when these file upload is completed we inject it as a middleware

first we will look cloudinary

if you are uploading file upload two common packages are used mainly
1. express file upload
2. MULTER

MULTER IS ALSO A MIDDLEWARE

npm i cloudinary and npm i multer

NOTE: all the sensitive things are kept towards the environment variables.

Strategy to upload file:
1. we will make user upload file through multer and keep into our local server temporarily.
2. after using cloudinary we will take that file from the local storage and deploy/put it into our server.
(Also we can do this directly by taking user uploaded file from multer to cloudinary and deploy directly) but
in production grade services temporarily file is taken from user and placed into its own server so that at least if files
came into our server then we can reattempt for reuploading to the server

now copy the code from cloudinary about , upload, optimization and transform

now we can put cloudinary as anything for example as a service , as a utility

create a cloudinary file in the utils
If this service is being used then it returns the local file path to us
server->local->files to cloudinary

if file in the cloudniary is successfully uploaded then our server doesnot need these type of files so we remove from our 
local server

what do you mean by fs?
-> in node there is presence of file system

now in the cloudinary middleware add all the things 
like import and then cloudinary.config 

also at environment variables create cloudinary cloud name, api key and api secret and import them towards cloudinary

we will create a method where in that parameter you will give you the path of that local file then I will upload that 
if successfully uploaded of that file then unlink that file.

so this file problem is just like that of database such that most problems occurs here. 
here in that case use try catch     

Note: we can see what are the options using ctrl+ space

what we have done till now is created util file called cloudinary after installing cloudinary and multer
then we have copied and pasted then cloudinary cloud name, api name, and api secret into the environment variables.
then written codes in cloudinary to upload on the cloudinary and handle the errors using try catch when file is uploaded
unsuccessfully.

now next task is to create middleware using multer.
//**** video ends at 26:40*****/////

now we create middleware using multer. why? no need we can also do simply but now

where we need file upload capabilities we will inject multer there

example it is used in registration form so we will inject there. in login form there is no need so we dont inject

create middleware file named multer.

what we did till now in the concept?
-> configuration settings on the entire project.

/////////*****HTTP CRASH COURSE*******////////// video no 11

major difference between http and https:
http: the data in the http are sent as clear texts for example if abc data is sent then there will be abc data 
https: here it adds one more layer that encrpts the data by placing some key so that it is normally not readable so the data
can be readable at server or the data from the server gets readable to the client. (not in between)

if you are sending you also send the file information like filename, size, sent at,..... (metadata) these are called http headers
metadata: key-value sent along with the request and response

headers are used in caching, authentication, manage state

headers category:
request header: from client
response header: from server
representation header: encoding/compression
payload header: data  payload: fancy name for data

Most common headers:
accept: it tells which type of data are we going to store
user-agent: it tells request came from which application ex: data came from postman, or req is sent by browser etc
authorization: 
content-type: ex: images, pdf
cookie: time onto which user will be logged in ...etc
cache-control: when to expire data ....

video stopped at 13:30

////***COMPLETE GUIDE FOR ROUTER AND CONTROLLER WITH DEBUGGING
we will learn here how do we write controllers.

the more you write controllers the more your logic building will improve.

Note: steps to create logic building
1. divide the bigger problem into small chunks of problem then solve that small problem.
2. solve that problem and then go towards another problem

example: doing leetcodes problem, datastructures problem or solving real world problems

//here we will register the user

create file named user.controller.js in the controllers

now after creating method, now next step is how do method will run (it will run if it hits some kind of url)

so for that we create route folder

now create new file called user.routes.js

so most of the files like routes and controllers are imported in the app.
routes declaration is done in app.js

how to check if the work done will be get properly or not?
step 1: open browser goto google
step 2: download postman

you can check through postman to see if it is working 
in this case, here at first run the server on terminal npm run dev
then goto postman copy paste url which you want to check, and make sure to do post method instead of get or any other method
if the message written on user.controller.js is shown in postman which means it is running without errors

in next video we will remove res.status(200).json({
        message:"hello i am under water"
    })
this code from user register and properly register user
we will take data from postman like name, email,photos 
we will see how we taked to server accept it and add it to the database


//////******LOGIC BUILDING IN BACKEND*******//////
#Business logic building

now we have to register user 
break it into small steps and solve the problem

steps:
1. get user details from frontend
2. validation 
3. check if user already exists (username or email)
4. check for images, check for avatar
5. upload them to cloudinary, avatar
6. create user object - create entry in db
7. remove password and refresh token field from response
8. check for user creation 
9. return response
(if you know to follow steps then steps are the algorithms)

now to check is the req.body is actually taking up data first run server npm run dev
then goto postman and click raw data select json instead of selecting text
example write like this on raw. {
    "email": "gauravthapa926@gmail.com",
    "password": ""
}

Note: postman ma url halda euta space pani lagyo bhane message pathauna sakidaina.

Process to receive data send through postman:
npm run dev
goto postman copy paste the url and then post method
then in body select raw and json
make object and write message
console log on the controller where you are calling
you will receive message on vs code

#this is the code on the controller to get message from postman
const {fullname, email, username, password} = req.body;  
    console.log("email: ", email)

req.body bata data aairachha

for file handling 
go directly to the routes
multer ma bhako upload lai routes ma import garne (userroutes)

Note: .some() function checks if it is true or false when we check using the condition

//validation code 
if (
        [fullname, email, username, password].some((field) => field?.trim() === "")

   ){
        throw new ApiError(400, "all fields are required")
   }

Note: req.body ma sabai data aaucha but since we used middleware, multer gives feature/access to add fields in the req 
example: req.file

#tasks upto check for images, check for avatar completed now we have to upload files to the cloudinary video at 34:40

task started:

now import the  cloudinary file which we had already created into the user.controller.js

Note: suppose kunei required field banako cha and then tesko file haru kei katham liyena bhane pakka database ma problem aaucha
so jaile pani throw error case banaunu parchha

upload on cloudinary ko kaam sakepachhi now goto the next step that is create user object and create entry in db.

how will it be entry in the database?
import {User} from "../models/user.model.js"; //this is talking with the database

Again point to be noted
Note:
1. while working with the database you could potentially get error
2. database is always in another continent

now check if the user is empty or not

Note:
mongodb le harek entry ko saath ma euta _id name ko field add garidinchha

// .select() bhanne euta function jasma tyo tyo chiz select garnu sakinchha which we think are to be selected 
// .select() bhitra pass hunchha string jasma tyo tyo string lekhinchha jun hamilaai chaidaina

Note: jati time you spend on coding the more time you will spend on debugging.....

////////********HOW TO USE POSTMAN FOR BACKEND*******//////////

Quote: "If any person is thinking that his code is goona run in the first attempt, then either he is inexperienced or 
severly overconfident" 
"So whenever you write code always expect that this code will not run" so that it needs some debugging 

professional level ma postman lai pani use garne tarika huncha jun frontend sanga pani share garnu parne hunchha
there is a thing called collection such that postman collection are shared with the frontend engineers by backend developers/engineers

In postman do it from first:
1. goto new tab.
2. select post instead of get
3. goto body and type form data
4. you could also send by selecting raw data in json format by doing this {} but json doesnot have option of sending the files  
5. write all necessary key and values like fullname: gaurav, email: g@g.com

video stopped at 8:20 . 

restart postman from the same place 
response message that was received was this one. 
{
    "success": true,
    "message": "User does not exist, you can proceed with registration."
}

****Currently this error has been seen till now.
Mongodb connection successful !! DB HOST: cluster0-shard-00-01.wxygq.mongodb.net
Server is running on 8000
Request body ma bhako: [Object: null prototype] {
  fullname: 'Gaurav Thapa Magar',
  email: 'gauravthapa926@gmail.com',
  password: '12345678',
  username: 'gauravmgrr'
}
email:  gauravthapa926@gmail.com
file is uploaded on cloudinary http://res.cloudinary.com/dlnmkc7bj/image/upload/v1739038554/nf6sl8r46zq4j83ni5nm.jpg
file is uploaded on cloudinary http://res.cloudinary.com/dlnmkc7bj/image/upload/v1739038556/pute1ksvhmd0el9kfh6v.jpg
ValidationError: User validation failed: coverimage: Path `coverimage` is required.
    at Document.invalidate (G:\All Works\Javascript\backend\node_modules\mongoose\lib\document.js:3334:32)
    at G:\All Works\Javascript\backend\node_modules\mongoose\lib\document.js:3095:17
    at G:\All Works\Javascript\backend\node_modules\mongoose\lib\schemaType.js:1407:9
    at process.processTicksAndRejections (node:internal/process/task_queues:85:11)


Note: You can check if the images or files has been uploaded or not in the media explorer

started:

our works:
1. cloudinary ko purei ko purei response lai console.log garera hernu paryo
2. console.log for req.body in the usercontrollers
3. req.files lai pani print garayera herney

video stopped at 17:20
we will again try to reupload the data from the postman 


Now summarization of controllers is done and written in the comments in the controllers


//////////////**************IMPORTANT POSTMAN SECTION***********/////////////
//Postman collections
create black collection
click on add a request
then change name of new request
copy paste url and then save

copy http://localhost:8000/api/v1 and go to environments

linking between collections and environments can be done at the no environments section and click the name of the folder of 
the collection where you want to place your variable

now in user register after linking with the environment variable you can use {{}} double curly brace and /users/register as it is.

aba try garne euta tei link ma form data ma key value halera
if run successfully you can save that process so that in the future if we want to upload similar kinds of data we can simply change
the fields of the data (or key value pairs )